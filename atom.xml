<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/iMHaoyu.github.io/atom.xml" rel="self"/>
  
  <link href="https://xuhaoyucn.com/"/>
  <updated>2018-10-10T10:39:56.681Z</updated>
  <id>https://xuhaoyucn.com/</id>
  
  <author>
    <name>xuhaoyu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自定义转场动画</title>
    <link href="https://xuhaoyucn.com/2018/10/10/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/"/>
    <id>https://xuhaoyucn.com/2018/10/10/自定义转场动画/</id>
    <published>2018-10-10T08:11:58.000Z</published>
    <updated>2018-10-10T10:39:56.681Z</updated>
    
    <content type="html"><![CDATA[<p>之前看了onevcat大神的这篇博客：<a href="https://onevcat.com/2013/10/vc-transition-in-ios7/" target="_blank" rel="noopener">WWDC 2013 Session笔记 - iOS7中的ViewController切换</a>，很有兴趣，就针对iOS的转场动画进行了学习。其实在之前也遇到过此类的文章，一直以为要花较多的时间研究，所以就搁置了很久。一直等到我准备写一个iOS的框架才突然想到要学习以下，然后把转场动画放入我的框架中，就这样就开始了。</p><p>其实关于这方面的文章网络上也已经很多了，作为新手，我想通过这篇文章把自己的学习心得记录一下，方便加深印象和以后的回顾。这是也我第一次写技术文章，不好之处和错误的地方请谅解，也欢迎大神给予指点。废话不多说，开始吧。</p><p>以下的所有相关的API都定义在UIKit的 <figure class="highlight plain"><figcaption><span>中了，为了便于比较和记忆，我把比较关键的API都列在下面。</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">关于自定义转场就离不开这几个Protocol：</span><br><span class="line"></span><br><span class="line">* UIViewControllerContextTransitioning</span><br><span class="line">* UIViewControllerAnimatedTransitioning</span><br><span class="line">* UIViewControllerInteractiveTransitioning</span><br><span class="line">* UIViewControllerTransitioningDelegate</span><br><span class="line">* UINavigationControllerDelegate</span><br><span class="line">* UITabBarControllerDelegate</span><br><span class="line"></span><br><span class="line">我之前乍一看这么多协议都乱了，其实很简单，我们可以将其分为三类：</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">1.描述ViewController转场的：</span><br><span class="line">* UIViewControllerTransitioningDelegate</span><br><span class="line">* UINavigationControllerDelegate</span><br><span class="line">* UITabBarControllerDelegate</span><br><span class="line"></span><br><span class="line">2.定义动画内容的</span><br><span class="line">* UIViewControllerAnimatedTransitioning</span><br><span class="line">* UIViewControllerInteractiveTransitioning</span><br><span class="line"></span><br><span class="line">3.表示转场动画上下文的</span><br><span class="line">* UIViewControllerContextTransitioning</span><br><span class="line"></span><br><span class="line">首先，实现自定义ViewController的转场动画首先就要找到```Delegate```。ViewController的切换可以有三种：```UITabBarController```-标签控制器的控制器切换，```UINavigationController```-导航控制器push和pop，```ViewController```-模态的present和dismiss（present modal ViewController），这三种方式都遵循这不同的协议来实现，我们来分别看下：</span><br><span class="line"></span><br><span class="line">&gt; * ```UIViewControllerTransitioningDelegate``` 自定义模态转场动画时使用。</span><br><span class="line">设置UIViewController的属性```transitioningDelegate```。@property (nullable, nonatomic, weak) id &lt;UIViewControllerTransitioningDelegate&gt; transitioningDelegate</span><br><span class="line"></span><br><span class="line">&gt; * ```UINavigationControllerDelegate``` 自定义navigation转场动画时使用。</span><br><span class="line">设置UINavigationController的属性```delegate```。@property(nullable, nonatomic, weak) id&lt;UINavigationControllerDelegate&gt; delegate</span><br><span class="line">&gt; * ```UITabBarControllerDelegate``` 自定义tab转场动画时使用。</span><br><span class="line">设置UITabBarController的属性```delegate```。@property(nullable, nonatomic,weak) id&lt;UITabBarControllerDelegate&gt; delegate</span><br><span class="line"></span><br><span class="line">其实这三个协议基本上是一样的，只是应用的场景不同而已。下面我是以```模态```为例写了一个Demo，我将开始介绍实现的步骤。</span><br><span class="line"></span><br><span class="line">在开始之前，我们需要了解```UIViewControllerContextTransitioning```、``` UIViewControllerAnimatedTransitioning```和```UIViewControllerTransitioningDelegate```，这三个协议下的重要API：</span><br><span class="line"></span><br><span class="line">@protocol UIViewControllerContextTransitioning  </span><br><span class="line">这个接口用来提供切换上下文给开发者使用，包含了从哪个VC到哪个VC等各类信息，一般不需要开发者自己实现。具体来说，iOS7时自定义切换目的之一就是切换相关代码解耦，在进行VC切换时，做切换效果实现的时候必须需要切换前后VC的一些信息，系统在新加入的API的比较的地方都会提供一个实现了该接口的对象，以供我们使用。</span><br></pre></td></tr></table></figure></p><p>-(UIView <em>)containerView; //VC切换所发生的view容器，开发者应该将切出的view移除，将切入的view加入到该view容器中。<br>-(UIViewController </em>)viewControllerForKey:(NSString <em>)key; //提供一个key，返回对应的VC。现在的SDK中key的选择只有UITransitionContextFromViewControllerKey和UITransitionContextToViewControllerKey两种，分别表示将要切出和切入的VC。<br>-(CGRect)initialFrameForViewController:(UIViewController </em>)vc; //某个VC的初始位置，可以用来做动画的计算。<br>-(CGRect)finalFrameForViewController:(UIViewController *)vc; //与上面的方法对应，得到切换结束时某个VC应在的frame。<br>-(void)completeTransition:(BOOL)didComplete; //向这个context报告切换已经完成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@protocol UIViewControllerAnimatedTransitioning  这个接口负责切换的具体内容，也即“切换中应该发生什么”。开发者在做自定义切换效果时大部分代码会是用来实现这个接口。它只有两个方法需要我们实现：</span><br></pre></td></tr></table></figure></p><p>-(NSTimeInterval)transitionDuration:(id &lt; UIViewControllerContextTransitioning &gt;)transitionContext; //系统给出一个切换上下文，我们根据上下文环境返回这个切换所需要的花费时间（一般就返回动画的时间就好了，SDK会用这个时间来在百分比驱动的切换中进行帧的计算，后面再详细展开）。</p><p>-(void)animateTransition:(id &lt; UIViewControllerContextTransitioning &gt;)transitionContext; //在进行切换的时候将调用该方法，我们对于切换时的UIView的设置和动画都在这个方法中完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@protocol UIViewControllerTransitioningDelegate  这个接口的作用比较简单单一，在需要VC切换的时候系统会像实现了这个接口的对象询问是否需要使用自定义的切换效果。这个接口共有四个类似的方法：</span><br></pre></td></tr></table></figure><p>-(id&lt; UIViewControllerAnimatedTransitioning &gt;)animationControllerForPresentedController:(UIViewController <em>)presented presentingController:(UIViewController </em>)presenting sourceController:(UIViewController <em>)source; //我这里是返回一个过渡动画管理对象 UIViewControllerAnimatedTransitioning - 在模态弹出调用的<br>-(id&lt; UIViewControllerAnimatedTransitioning &gt;)animationControllerForDismissedController:(UIViewController </em>)dismissed;//我这里是返回一个过渡动画管理对象 UIViewControllerAnimatedTransitioning - 在模态弹出后Dismiss调用的<br>-(id&lt; UIViewControllerInteractiveTransitioning &gt;)interactionControllerForPresentation:(id &lt; UIViewControllerAnimatedTransitioning &gt;)animator; //返回转换的手势交互管理对象 -  在模态弹出调用的<br>-(id&lt; UIViewControllerInteractiveTransitioning &gt;)interactionControllerForDismissal:(id &lt; UIViewControllerAnimatedTransitioning &gt;)animator; //返回转换的手势交互管理对象 -  在模态弹出后Dismiss调用的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">前两个方法是针对动画切换的，我们需要分别在呈现VC和解散VC时，给出一个实现了UIViewControllerAnimatedTransitioning接口的对象（其中包含切换时长和如何切换）。后两个方法涉及交互式切换。</span><br><span class="line"></span><br><span class="line">下面贴出我的代码，正式开始：</span><br><span class="line"></span><br><span class="line">首先根据```UIViewControllerTransitioningDelegate```中的上面介绍的四个方法，分别新建四个对象（我这边没有新建模态弹出的手势交互管理对象）</span><br><span class="line"></span><br><span class="line">* HYPresentAnimation - 主要提供转场开始的过渡动画</span><br></pre></td></tr></table></figure><p>//HYPresentAnimation.h</p><p>#import &lt;Foundation/Foundation.h&gt;</p><p>#import &lt;UIKit/UIKit.h&gt;<br>@interface HYPresentAnimation : NSObject <uiviewcontrolleranimatedtransitioning><br>@end</uiviewcontrolleranimatedtransitioning></p><p>//HYPresentAnimation.m</p><p>#import “HYPresentAnimation.h”</p><p>@implementation HYPresentAnimation</p><ul><li><p>(NSTimeInterval)transitionDuration:(id<uiviewcontrollercontexttransitioning>)transitionContext {<br>  return 0.5;<br>}</uiviewcontrollercontexttransitioning></p></li><li><p>(void)animateTransition:(id<uiviewcontrollercontexttransitioning>)transitionContext {<br>  //通过viewControllerForKey取出转场前后的两个控制器，这里toVC就是vc1、fromVC就是vc2<br>  UIViewController <em>toVC   = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];<br>  UIViewController </em>fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];<br>  //snapshotViewAfterScreenUpdates可以对某个视图截图，我们采用对这个截图做动画代替直接对vc1做动画，因为在手势过渡中直接使用vc1动画会和手势有冲突， 如果不需要实现手势的话，就可以不是用截图视图了，大家可以自行尝试一下<br>  UIView <em>tempView = [fromVC.view snapshotViewAfterScreenUpdates:NO];<br>  tempView.frame   = fromVC.view.frame;<br>  tempView.layer.masksToBounds = YES;<br>  //因为对截图做动画，vc1就可以隐藏了<br>  fromVC.view.hidden = YES;<br>  //这里有个重要的概念containerView，如果要对视图做转场动画，视图就必须要加入containerView中才能进行，可以理解containerView管理着所有做转场动画的视图<br>  UIView </em>containerView = [transitionContext containerView];<br>  //将截图视图和vc2的view都加入ContainerView中<br>  [containerView addSubview:tempView];<br>  [containerView addSubview:toVC.view];</uiviewcontrollercontexttransitioning></p><p>  //顶部间隔<br>  CGFloat space = 80;<br>  //设置vc2的frame，因为这里vc2present出来不是全屏，且初始的时候在底部，如果不设置frame的话默认就是整个屏幕咯，这里containerView的frame就是整个屏幕<br>  toVC.view.frame = CGRectMake(0, containerView.frame.size.height, containerView.frame.size.width, containerView.frame.size.height-space);<br>  //开始动画吧，使用产生弹簧效果的动画API<br>  [UIView animateWithDuration:[self transitionDuration:transitionContext] delay:0 usingSpringWithDamping:.85 initialSpringVelocity:1.0 / 0.55 options:0 animations:^{</p><pre><code>//首先我们让vc2向上移动toVC.view.transform = CGAffineTransformMakeTranslation(0, -(containerView.frame.size.height-space));//然后让截图视图缩小一点即可tempView.transform = CGAffineTransformMakeScale(0.96, 0.96);tempView.layer.cornerRadius = 8;//改变状态栏颜色</code></pre><p>  } completion:^(BOOL finished) {</p><pre><code>//使用如下代码标记整个转场过程是否正常完成[transitionContext transitionWasCancelled]代表手势是否取消了，如果取消了就传NO表示转场失败，反之亦然，如果不用手势present的话直接传YES也是可以的，但是无论如何我们都必须标记转场的状态，系统才知道处理转场后的操作，否者认为你一直还在转场中，会出现无法交互的情况，切记！[transitionContext completeTransition:![transitionContext transitionWasCancelled]];//转场失败后的处理if ([transitionContext transitionWasCancelled]) {    //失败后，我们要把vc1显示出来    fromVC.view.hidden = NO;    //然后移除截图视图，因为下次触发present会重新截图    [tempView removeFromSuperview];    [transitionContext completeTransition:NO];}</code></pre><p>  }];<br>}<br>@end</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* HYDismissAnimation - Dismiss时的过渡动画</span><br></pre></td></tr></table></figure><p>//HYDismissAnimation.h</p><p>#import &lt;Foundation/Foundation.h&gt;</p><p>#import &lt;UIKit/UIKit.h&gt;<br>@interface HYDismissAnimation : NSObject <uiviewcontrolleranimatedtransitioning></uiviewcontrolleranimatedtransitioning></p><p>@end</p><p>//HYDismissAnimation.m</p><p>#import “HYDismissAnimation.h”</p><p>@implementation HYDismissAnimation</p><ul><li><p>(NSTimeInterval)transitionDuration:(id<uiviewcontrollercontexttransitioning>)transitionContext {<br>  return 0.5;<br>}</uiviewcontrollercontexttransitioning></p></li><li><p>(void)animateTransition:(id<uiviewcontrollercontexttransitioning>)transitionContext {<br>  //注意在dismiss的时候fromVC就是vc2了，toVC才是VC1了，注意这个关系<br>  UIViewController <em>fromVC = [transitionContext viewControllerForKey:UITransitionContextFromViewControllerKey];<br>  UIViewController </em>toVC   = [transitionContext viewControllerForKey:UITransitionContextToViewControllerKey];<br>  //参照present动画的逻辑，present成功后，containerView的最后一个子视图就是截图视图，我们将其取出准备动画<br>  UIView *tempView = [transitionContext containerView].subviews[0];<br>  //动画吧<br>  [UIView animateWithDuration:[self transitionDuration:transitionContext] animations:^{</uiviewcontrollercontexttransitioning></p><pre><code>//因为present的时候都是使用的transform，这里的动画只需要将transform恢复就可以了fromVC.view.transform = CGAffineTransformIdentity;tempView.transform    = CGAffineTransformIdentity;tempView.layer.cornerRadius = 0;</code></pre><p>  } completion:^(BOOL finished) {</p><pre><code>if ([transitionContext transitionWasCancelled]) {    //失败了标记失败    [transitionContext completeTransition:NO];}else{    //如果成功了，我们需要标记成功，同时让vc1显示出来，然后移除截图视图，    [transitionContext completeTransition:YES];    toVC.view.hidden = NO;    [tempView removeFromSuperview];}</code></pre><p>  }];<br>}</p></li></ul><p>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* HYInteractiveTransition - Dismiss手势交互管理</span><br></pre></td></tr></table></figure></p><p>//HYInteractiveTransition.h</p><p>#import &lt;UIKit/UIKit.h&gt;<br>@interface HYInteractiveTransition : UIPercentDrivenInteractiveTransition<br>//是否是正在交互中<br>@property (nonatomic, assign) BOOL interacting;</p><ul><li>(void)wireToViewController:(UIViewController*)viewController;<br>@end</li></ul><p>//HYInteractiveTransition.m</p><p>#import “HYInteractiveTransition.h”</p><p>@interface HYInteractiveTransition()<br>@property (nonatomic, assign) BOOL shouldComplete;<br>@property (nonatomic, strong) UIViewController *presentingVC;<br>@end</p><p>@implementation HYInteractiveTransition</p><ul><li><p>(void)wireToViewController:(UIViewController*)viewController {<br>  self.presentingVC = viewController;<br>  [self prepareGestureRecognizerInView:viewController.view];<br>}</p></li><li><p>(void)prepareGestureRecognizerInView:(UIView<em>)view {<br>  UIPanGestureRecognizer </em>gesture = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(handleGesture:)];<br>  [view addGestureRecognizer:gesture];<br>}</p></li><li><p>(void)handleGesture:(UIPanGestureRecognizer *)gestureRecognizer {<br>  CGPoint translation = [gestureRecognizer translationInView:gestureRecognizer.view];<br>  switch (gestureRecognizer.state) {</p><pre><code>case UIGestureRecognizerStateBegan:    //1.标记交互标志。 在委托中提供时使用。    self.interacting = YES;    [self.presentingVC dismissViewControllerAnimated:YES completion:nil];    break;case UIGestureRecognizerStateChanged:{    // 2. 计算手势的百分比    CGFloat fraction = translation.y / gestureRecognizer.view.frame.size.height;;    //限制在0和1之间    fraction = fminf(fmaxf(fraction, 0.0), 1.0);    self.shouldComplete = (fraction &gt; 0.3);    [self updateInteractiveTransition:fraction];}    break;case UIGestureRecognizerStateEnded:case UIGestureRecognizerStateCancelled:{    //3.手势交互结束。检查转换是否应该发生    self.interacting = NO;    if (!self.shouldComplete || gestureRecognizer.state == UIGestureRecognizerStateCancelled) {        [self cancelInteractiveTransition];    } else {        [self finishInteractiveTransition];    }}    break;default:    break;</code></pre><p>  }<br>}</p></li></ul><p>@end<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后在VC1中实现下面的方法（这里就姑且叫VC1吧，逻辑关系是：从VC1跳转到VC2):</span><br></pre></td></tr></table></figure></p><ul><li><p>(nullable id <uiviewcontrolleranimatedtransitioning>)animationControllerForPresentedController:(UIViewController <em>)presented presentingController:(UIViewController </em>)presenting sourceController:(UIViewController *)source {<br>  return self.presentAnimation;<br>}</uiviewcontrolleranimatedtransitioning></p></li><li><p>(nullable id <uiviewcontrolleranimatedtransitioning>)animationControllerForDismissedController:(UIViewController *)dismissed {<br>  return self.dismissAnimation;<br>}</uiviewcontrolleranimatedtransitioning></p></li></ul><p>//- (nullable id <uiviewcontrollerinteractivetransitioning>)interactionControllerForPresentation:(id <uiviewcontrolleranimatedtransitioning>)animator {<br>//<br>//}<br>//</uiviewcontrolleranimatedtransitioning></uiviewcontrollerinteractivetransitioning></p><ul><li>(nullable id <uiviewcontrollerinteractivetransitioning>)interactionControllerForDismissal:(id <uiviewcontrolleranimatedtransitioning>)animator {<br>  return self.transitionController.interacting ? self.transitionController : nil;<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">其中，```self.presentAnimation```、```self.dismissAnimation</span><br></pre></td></tr></table></figure></uiviewcontrolleranimatedtransitioning></uiviewcontrollerinteractivetransitioning></li></ul><p>、<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>@property (nonatomic, strong) HYPresentAnimation <em>presentAnimation;<br>@property (nonatomic, strong) HYDismissAnimation </em>dismissAnimation;<br>@property (nonatomic, strong) HYInteractiveTransition *transitionController;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">最后别忘了实现```transitioningDelegate```，要想Dismiss的时候就可以直接手指下滑就可以了。</span><br></pre></td></tr></table></figure></p><ul><li>(void)btnClicked:(UIButton <em>)sender {<br>HYSecondVC </em>tempVC = [[HYSecondVC alloc]init];<br>tempVC.transitioningDelegate = self;<br>[self.transitionController wireToViewController:tempVC];<br>[self presentViewController:tempVC animated:YES completion:nil];<br>}<br><code>`</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前看了onevcat大神的这篇博客：&lt;a href=&quot;https://onevcat.com/2013/10/vc-transition-in-ios7/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WWDC 2013 Session笔记 - iOS7
      
    
    </summary>
    
      <category term="iOS" scheme="https://xuhaoyucn.com/categories/iOS/"/>
    
    
      <category term="模态弹出的转场动画" scheme="https://xuhaoyucn.com/tags/%E6%A8%A1%E6%80%81%E5%BC%B9%E5%87%BA%E7%9A%84%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>第一篇</title>
    <link href="https://xuhaoyucn.com/2018/09/29/%E5%BC%80%E7%AF%87%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <id>https://xuhaoyucn.com/2018/09/29/开篇第一篇/</id>
    <published>2018-09-29T06:02:31.000Z</published>
    <updated>2018-09-29T06:55:48.914Z</updated>
    
    <content type="html"><![CDATA[<p>在某种机缘巧合之下，接触了个人博客 Octopress，然后就很感兴趣，就想的搭建属于自己的个人博客，以此来激励自己更努力的学习。</p><p>然后我就查找了好多关于 Octopress 的文章，不过后来看到了 Hexo ，发现 Hexo 的博客主题比 Octopress 多很多也很好看于是上网找了Hexo博客的搭建方法。 于是我的第一个个人博客就这样出现了，当然期间也花费了很多时间和精力，每天提前三个多小时到公司连续弄了三四天。还好，结果还是让人很满意的！</p><a id="more"></a><blockquote><p>ps：本人是在公司工作不是那么忙的时候弄的，如果你们公司的事情很多，我建议各位还是有空的时候在弄吧。毕竟有些东西还是要深入的了解一下的。</p></blockquote><p>在写这篇博客的时候有想过把我学习搭建博客的方法分享给大家，但是发现关于 Hexo+Github 搭建博客的方法有很多，所以我也就没有写下来。<br>不过我还是把我参考的方法链接分享给大家吧：</p><blockquote><p>搭建方法：</p><ul><li><a href="https://blog.csdn.net/qq_34290780/article/details/78230706" target="_blank" rel="noopener">https://blog.csdn.net/qq_34290780/article/details/78230706</a></li></ul><p>我用的主题是： - “pure”</p><ul><li><a href="https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md" target="_blank" rel="noopener">https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md</a></li></ul><p>可以根据以上的方法搭建自己的博客主题</p></blockquote><p>现在写个博客感觉好像又回到了高中写作文的时候，本来就偏科文采不是很好，所有就先写到这吧…</p><p>对了，我以后会把我的学习成果和总计、学到的新的技术、封装的框架或控件的思路都写在博客里面，会不定时的更新出来，希望有什么不足的可以指出来，有什么需要指点的也可以联系我，我会尽力帮助你。欢迎各位不吝赐教，共同学习，一起成长！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在某种机缘巧合之下，接触了个人博客 Octopress，然后就很感兴趣，就想的搭建属于自己的个人博客，以此来激励自己更努力的学习。&lt;/p&gt;
&lt;p&gt;然后我就查找了好多关于 Octopress 的文章，不过后来看到了 Hexo ，发现 Hexo 的博客主题比 Octopress 多很多也很好看于是上网找了Hexo博客的搭建方法。 于是我的第一个个人博客就这样出现了，当然期间也花费了很多时间和精力，每天提前三个多小时到公司连续弄了三四天。还好，结果还是让人很满意的！&lt;/p&gt;
    
    </summary>
    
      <category term="个人总结" scheme="https://xuhaoyucn.com/categories/%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="感悟" scheme="https://xuhaoyucn.com/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
</feed>
